<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BitMart.Net</name>
    </assembly>
    <members>
        <member name="T:BitMart.Net.BitMartEnvironment">
            <summary>
            BitMart environments
            </summary>
        </member>
        <member name="P:BitMart.Net.BitMartEnvironment.RestSpotClientAddress">
            <summary>
            Rest API address
            </summary>
        </member>
        <member name="P:BitMart.Net.BitMartEnvironment.RestFuturesClientAddress">
            <summary>
            Rest API address
            </summary>
        </member>
        <member name="P:BitMart.Net.BitMartEnvironment.SocketClientSpotAddress">
            <summary>
            Socket Spot API address
            </summary>
        </member>
        <member name="P:BitMart.Net.BitMartEnvironment.SocketClientPerpetualFuturesAddress">
            <summary>
            Socket Perpetual Futures API address
            </summary>
        </member>
        <member name="M:BitMart.Net.BitMartEnvironment.#ctor">
            <summary>
            ctor for DI, use <see cref="M:BitMart.Net.BitMartEnvironment.CreateCustom(System.String,System.String,System.String,System.String,System.String)"/> for creating a custom environment
            </summary>
        </member>
        <member name="M:BitMart.Net.BitMartEnvironment.GetEnvironmentByName(System.String)">
            <summary>
            Get the BitMart environment by name
            </summary>
        </member>
        <member name="P:BitMart.Net.BitMartEnvironment.Live">
            <summary>
            Live environment, using Futures V2 API
            </summary>
        </member>
        <member name="P:BitMart.Net.BitMartEnvironment.LiveFuturesV1">
            <summary>
            Live environment, using Futures V1 API
            </summary>
        </member>
        <member name="M:BitMart.Net.BitMartEnvironment.CreateCustom(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a custom environment
            </summary>
            <param name="name"></param>
            <param name="restSpotAddress"></param>
            <param name="restFuturesAddress"></param>
            <param name="spotSocketStreamsAddress"></param>
            <param name="perpetualFuturesSocketStreamAddress"></param>
            <returns></returns>
        </member>
        <member name="T:BitMart.Net.BitMartExchange">
            <summary>
            BitMart exchange information and configuration
            </summary>
        </member>
        <member name="P:BitMart.Net.BitMartExchange.ExchangeName">
            <summary>
            Exchange name
            </summary>
        </member>
        <member name="P:BitMart.Net.BitMartExchange.DisplayName">
            <summary>
            Display exchange name
            </summary>
        </member>
        <member name="P:BitMart.Net.BitMartExchange.ImageUrl">
            <summary>
            Url to exchange image
            </summary>
        </member>
        <member name="P:BitMart.Net.BitMartExchange.Url">
            <summary>
            Url to the main website
            </summary>
        </member>
        <member name="P:BitMart.Net.BitMartExchange.ApiDocsUrl">
            <summary>
            Urls to the API documentation
            </summary>
        </member>
        <member name="P:BitMart.Net.BitMartExchange.Type">
            <summary>
            Type of exchange
            </summary>
        </member>
        <member name="M:BitMart.Net.BitMartExchange.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <summary>
            Format a base and quote asset to a BitMart recognized symbol 
            </summary>
            <param name="baseAsset">Base asset</param>
            <param name="quoteAsset">Quote asset</param>
            <param name="tradingMode">Trading mode</param>
            <param name="deliverTime">Delivery time for delivery futures</param>
            <returns></returns>
        </member>
        <member name="P:BitMart.Net.BitMartExchange.RateLimiter">
            <summary>
            Rate limiter configuration for the BitMart API
            </summary>
        </member>
        <member name="T:BitMart.Net.BitMartRateLimiters">
            <summary>
            Rate limiter configuration for the BitMart API
            </summary>
        </member>
        <member name="E:BitMart.Net.BitMartRateLimiters.RateLimitTriggered">
            <summary>
            Event for when a rate limit is triggered
            </summary>
        </member>
        <member name="T:BitMart.Net.BitMartTrackerFactory">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.BitMartTrackerFactory.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:BitMart.Net.BitMartTrackerFactory.#ctor(System.IServiceProvider)">
            <summary>
            ctor
            </summary>
            <param name="serviceProvider">Service provider for resolving logging and clients</param>
        </member>
        <member name="M:BitMart.Net.BitMartTrackerFactory.CreateKlineTracker(CryptoExchange.Net.SharedApis.SharedSymbol,CryptoExchange.Net.SharedApis.SharedKlineInterval,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.BitMartTrackerFactory.CreateTradeTracker(CryptoExchange.Net.SharedApis.SharedSymbol,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.BitMartRestClient">
            <inheritdoc cref="T:BitMart.Net.Interfaces.Clients.IBitMartRestClient" />
        </member>
        <member name="P:BitMart.Net.Clients.BitMartRestClient.UsdFuturesApi">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Clients.BitMartRestClient.SpotApi">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.BitMartRestClient.#ctor(System.Action{BitMart.Net.Objects.Options.BitMartRestOptions})">
            <summary>
            Create a new instance of the BitMartRestClient using provided options
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BitMart.Net.Clients.BitMartRestClient.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{BitMart.Net.Objects.Options.BitMartRestOptions})">
            <summary>
            Create a new instance of the BitMartRestClient using provided options
            </summary>
            <param name="options">Option configuration</param>
            <param name="loggerFactory">The logger factory</param>
            <param name="httpClient">Http client for this client</param>
        </member>
        <member name="M:BitMart.Net.Clients.BitMartRestClient.SetOptions(CryptoExchange.Net.Objects.Options.UpdateOptions)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.BitMartRestClient.SetDefaultOptions(System.Action{BitMart.Net.Objects.Options.BitMartRestOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BitMart.Net.Clients.BitMartRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.BitMartSocketClient">
            <inheritdoc cref="T:BitMart.Net.Interfaces.Clients.IBitMartSocketClient" />
        </member>
        <member name="P:BitMart.Net.Clients.BitMartSocketClient.UsdFuturesApi">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Clients.BitMartSocketClient.SpotApi">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.BitMartSocketClient.#ctor(System.Action{BitMart.Net.Objects.Options.BitMartSocketOptions})">
            <summary>
            Create a new instance of BitMartSocketClient
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BitMart.Net.Clients.BitMartSocketClient.#ctor(Microsoft.Extensions.Options.IOptions{BitMart.Net.Objects.Options.BitMartSocketOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create a new instance of BitMartSocketClient
            </summary>
            <param name="loggerFactory">The logger factory</param>
            <param name="options">Option configuration</param>
        </member>
        <member name="M:BitMart.Net.Clients.BitMartSocketClient.SetOptions(CryptoExchange.Net.Objects.Options.UpdateOptions)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.BitMartSocketClient.SetDefaultOptions(System.Action{BitMart.Net.Objects.Options.BitMartSocketOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BitMart.Net.Clients.BitMartSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi">
            <inheritdoc cref="T:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApi" />
        </member>
        <member name="P:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.Account">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.Margin">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.SubAccount">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.Trading">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="E:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client. Only available for Spot orders
            </summary>
        </member>
        <member name="E:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.OnOrderCanceled">
            <summary>
            Event triggered when an order is canceled via this client. Note that this does not trigger when using CancelAllOrdersAsync. Only available for Spot orders
            </summary>
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.ParseErrorResponse(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.CommonSpotClient">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApi.GetSymbolName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount.GetFundingBalancesAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount.GetSpotBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount.GetWithdrawalQuotaAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount.WithdrawAsync(System.String,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount.GetDepositWithdrawalAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount.GetIsolatedMarginAccountsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount.IsolatedMarginTransferAsync(System.String,System.String,System.Decimal,BitMart.Net.Enums.TransferDirection,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount.GetBaseTradeFeesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount.GetSymbolTradeFeeAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiAccount.GetWithdrawalAddressesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiExchangeData.GetAssetsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiExchangeData.GetSymbolNamesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiExchangeData.GetAssetDepositWithdrawInfoAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiExchangeData.GetServerStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiExchangeData.GetKlinesAsync(System.String,BitMart.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiExchangeData.GetKlineHistoryAsync(System.String,BitMart.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiExchangeData.GetTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiMargin">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiMargin.BorrowAsync(System.String,System.String,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiMargin.RepayAsync(System.String,System.String,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiMargin.GetBorrowHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiMargin.GetRepayHistoryAsync(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiMargin.GetBorrowInfoAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiSubAccount">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiSubAccount.TransferSubToMainForMainAsync(System.String,System.String,System.Decimal,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiSubAccount.TransferSubToMainForSubAsync(System.String,System.String,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiSubAccount.TransferMainToSubAccountAsync(System.String,System.String,System.Decimal,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiSubAccount.TransferSubAccountToSubAccountAsync(System.String,System.Decimal,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiSubAccount.GetSubAccountTransferHistoryForMainAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiSubAccount.GetSubAccountTransferHistoryAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiSubAccount.GetSubAcccountBalanceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiSubAccount.GetSubAccountListAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiTrading">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiTrading.PlaceOrderAsync(System.String,BitMart.Net.Enums.OrderSide,BitMart.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiTrading.PlaceMultipleOrdersAsync(System.String,System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartOrderRequest},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiTrading.CancelOrderAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiTrading.CancelOrdersAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiTrading.CancelAllOrderAsync(System.String,System.Nullable{BitMart.Net.Enums.OrderSide},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiTrading.PlaceMarginOrderAsync(System.String,BitMart.Net.Enums.OrderSide,BitMart.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiTrading.GetOrderAsync(System.String,System.Nullable{BitMart.Net.Enums.OrderQueryState},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiTrading.GetOrderByClientOrderIdAsync(System.String,System.Nullable{BitMart.Net.Enums.OrderQueryState},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{BitMart.Net.Enums.SpotMode},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{BitMart.Net.Enums.SpotMode},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiTrading.GetUserTradesAsync(System.String,System.Nullable{BitMart.Net.Enums.SpotMode},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartRestClientSpotApiTrading.GetOrderTradesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi">
            <summary>
            Client providing access to the BitMart Spot websocket Api
            </summary>
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.#ctor(Microsoft.Extensions.Logging.ILogger,BitMart.Net.Objects.Options.BitMartSocketOptions)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.SubscribeToKlineUpdatesAsync(System.String,BitMart.Net.Enums.KlineStreamInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},BitMart.Net.Enums.KlineStreamInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartOrderBookIncrementalUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartOrderBookIncrementalUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartBalanceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.GetListenerIdentifier(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.GetAuthenticationRequestAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.SpotApi.BitMartSocketClientSpotApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi">
            <inheritdoc cref="T:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApi" />
        </member>
        <member name="P:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi.Account">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi.SubAccount">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi.Trading">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApi.ParseErrorResponse(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiAccount">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiAccount.GetTransferHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiAccount.TransferAsync(System.String,System.Decimal,BitMart.Net.Enums.FuturesTransferType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiAccount.SetLeverageAsync(System.String,System.Decimal,BitMart.Net.Enums.MarginType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiAccount.GetSymbolTradeFeeAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiAccount.GetTransactionHistoryAsync(System.String,System.Nullable{BitMart.Net.Enums.FlowType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiExchangeData.GetContractsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiExchangeData.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiExchangeData.GetOpenInterestAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiExchangeData.GetCurrentFundingRateAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiExchangeData.GetFundingRateHistoryAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiExchangeData.GetKlinesAsync(System.String,BitMart.Net.Enums.FuturesKlineInterval,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiExchangeData.GetMarkKlinesAsync(System.String,BitMart.Net.Enums.FuturesKlineInterval,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiSubAccount">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiSubAccount.TransferSubToMainForMainAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiSubAccount.TransferMainToSubForMainAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiSubAccount.TransferSubToMainForSubAsync(System.String,System.Decimal,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiSubAccount.GetSubAcccountBalanceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiSubAccount.GetSubAccountTransferHistoryForMainAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiSubAccount.GetSubAccountTransferHistoryAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.GetOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{BitMart.Net.Enums.FuturesOrderType},System.Nullable{BitMart.Net.Enums.OrderStatusQuery},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.GetTriggerOrdersAsync(System.String,System.Nullable{BitMart.Net.Enums.OrderType},System.Nullable{System.Int32},System.Nullable{BitMart.Net.Enums.TriggerPlanType},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.GetPositionsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.GetPositionRiskAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.PlaceOrderAsync(System.String,BitMart.Net.Enums.FuturesSide,BitMart.Net.Enums.FuturesOrderType,System.Int32,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{BitMart.Net.Enums.MarginType},System.Nullable{BitMart.Net.Enums.OrderMode},System.Nullable{BitMart.Net.Enums.TriggerPriceType},System.Nullable{BitMart.Net.Enums.TriggerPriceType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.PlaceTrailingOrderAsync(System.String,BitMart.Net.Enums.FuturesSide,System.Int32,System.Decimal,BitMart.Net.Enums.MarginType,System.Decimal,System.Decimal,BitMart.Net.Enums.TriggerPriceType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.CancelTrailingOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.CancelOrderAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.CancelOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.PlaceTriggerOrderAsync(System.String,BitMart.Net.Enums.OrderType,BitMart.Net.Enums.FuturesSide,System.Int32,System.Decimal,BitMart.Net.Enums.MarginType,System.Decimal,BitMart.Net.Enums.PriceDirection,BitMart.Net.Enums.TriggerPriceType,System.Nullable{BitMart.Net.Enums.OrderMode},System.Nullable{System.Decimal},System.Nullable{BitMart.Net.Enums.PlanCategory},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BitMart.Net.Enums.TriggerPriceType},System.Nullable{BitMart.Net.Enums.TriggerPriceType},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.CancelTriggerOrderAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.PlaceTpSlOrderAsync(System.String,BitMart.Net.Enums.TplSlOrderType,BitMart.Net.Enums.FuturesSide,System.Decimal,BitMart.Net.Enums.TriggerPriceType,BitMart.Net.Enums.PlanCategory,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.Nullable{BitMart.Net.Enums.OrderType},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.EditTpSlOrderAsync(System.String,System.Decimal,BitMart.Net.Enums.TriggerPriceType,BitMart.Net.Enums.PlanCategory,BitMart.Net.Enums.OrderType,System.String,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.EditTriggerOrderAsync(System.String,System.Decimal,BitMart.Net.Enums.TriggerPriceType,BitMart.Net.Enums.OrderType,System.String,System.String,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartRestClientUsdFuturesApiTrading.EditPresetTriggerOrderAsync(System.String,System.String,BitMart.Net.Enums.TriggerPriceType,BitMart.Net.Enums.TriggerPriceType,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi">
            <summary>
            Client providing access to the BitMart UsdFutures websocket Api
            </summary>
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.#ctor(Microsoft.Extensions.Logging.ILogger,BitMart.Net.Objects.Options.BitMartSocketOptions)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToFundingRateUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFundingRateUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToFundingRateUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFundingRateUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartFuturesTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartFuturesTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToOrderBookSnapshotUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToOrderBookSnapshotUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToOrderBookIncrementalUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToOrderBookIncrementalUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartBookTicker}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartBookTicker}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToKlineUpdatesAsync(System.String,BitMart.Net.Enums.FuturesStreamKlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesKlineUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},BitMart.Net.Enums.FuturesStreamKlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesKlineUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToMarkKlineUpdatesAsync(System.String,BitMart.Net.Enums.FuturesStreamKlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesKlineUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToMarkKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},BitMart.Net.Enums.FuturesStreamKlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesKlineUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesBalanceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartPositionUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartFuturesOrderUpdateEvent}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.GetListenerIdentifier(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.GetAuthenticationRequestAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Clients.UsdFuturesApi.BitMartSocketClientUsdFuturesApi.FormatSymbol(System.String,System.String,CryptoExchange.Net.SharedApis.TradingMode,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Enums.BalanceUpdateType">
            <summary>
            Balance update type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.BalanceUpdateType.Trade">
            <summary>
            Trade
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.BalanceUpdateType.Deposit">
            <summary>
            Deposit
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.BalanceUpdateType.Withdrawal">
            <summary>
            Withdrawal
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.BalanceUpdateType.Transfer">
            <summary>
            Transfer
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.BalanceUpdateType.BmxDeduction">
            <summary>
            BMX handling fee deduction
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.ContractType">
            <summary>
            Contract type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.ContractType.Perpetual">
            <summary>
            Perpetual contract
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.ContractType.Futures">
            <summary>
            Futures contract
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.DepositWithdrawalStatus">
            <summary>
            Deposit/Withdrawal status
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.DepositWithdrawalStatus.Created">
            <summary>
            Created
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.DepositWithdrawalStatus.Submitted">
            <summary>
            Submitted
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.DepositWithdrawalStatus.Processing">
            <summary>
            Processsing
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.DepositWithdrawalStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.DepositWithdrawalStatus.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.DepositWithdrawalStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.EntrustType">
            <summary>
            Entrust type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.EntrustType.Normal">
            <summary>
            Normal (limit or market order)
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.EntrustType.LimitMaker">
            <summary>
            Limit maker
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.EntrustType.ImmediateOrCancel">
            <summary>
            Immediate or cancel
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.FeeRateType">
            <summary>
            Fee rate type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FeeRateType.Normal">
            <summary>
            Normal user
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FeeRateType.Vip">
            <summary>
            VIP user
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FeeRateType.SpecialVip">
            <summary>
            Special VIP user
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.FlowType">
            <summary>
            Flow type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FlowType.All">
            <summary>
            All
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FlowType.Transfer">
            <summary>
            Transfer
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FlowType.RealizedPnl">
            <summary>
            Realized profit and loss
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FlowType.FundingFee">
            <summary>
            Funding fee
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FlowType.CommissionFee">
            <summary>
            Commission fee
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FlowType.LiquidationClearance">
            <summary>
            Liquidation clearance
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.FuturesKlineInterval">
            <summary>
            Kline interval
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesKlineInterval.OneMinute">
            <summary>
            One minute
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesKlineInterval.ThreeMinutes">
            <summary>
            Three minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesKlineInterval.FiveMinutes">
            <summary>
            Five minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesKlineInterval.FifteenMinutes">
            <summary>
            Fifteen minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesKlineInterval.ThirtyMinutes">
            <summary>
            Thirty minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesKlineInterval.OneHour">
            <summary>
            One hour
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesKlineInterval.TwoHours">
            <summary>
            Two hours
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesKlineInterval.FourHours">
            <summary>
            Four hours
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesKlineInterval.SixHours">
            <summary>
            Six hours
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesKlineInterval.TwelveHours">
            <summary>
            Twelve hours
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesKlineInterval.OneDay">
            <summary>
            One day
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesKlineInterval.ThreeDays">
            <summary>
            Three days
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesKlineInterval.OneWeek">
            <summary>
            One week
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.FuturesOrderStatus">
            <summary>
            Futures order status
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesOrderStatus.Approval">
            <summary>
            Approval
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesOrderStatus.Check">
            <summary>
            Check
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesOrderStatus.Finish">
            <summary>
            Finish
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.FuturesOrderType">
            <summary>
            Futures order type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesOrderType.Limit">
            <summary>
            Limit order
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesOrderType.Market">
            <summary>
            Market order
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesOrderType.Liquidation">
            <summary>
            Liquidation
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesOrderType.Bankruptcy">
            <summary>
            Bankruptcy
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesOrderType.AutoDeleverage">
            <summary>
            Auto deleverage
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesOrderType.Trailing">
            <summary>
            Trailing
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.FuturesSide">
            <summary>
            Futures order side
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesSide.BuyOpenLong">
            <summary>
            Buy open long
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesSide.BuyCloseShort">
            <summary>
            Buy close short
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesSide.SellCloseLong">
            <summary>
            Sell close long
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesSide.SellOpenShort">
            <summary>
            Sell oen short
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.FuturesStreamKlineInterval">
            <summary>
            Stream kline interval
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesStreamKlineInterval.OneMinute">
            <summary>
            One minute
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesStreamKlineInterval.FiveMinutes">
            <summary>
            Five minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesStreamKlineInterval.FifteenMinutes">
            <summary>
            Fifteen minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesStreamKlineInterval.ThirtyMinutes">
            <summary>
            Thirty minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesStreamKlineInterval.OneHour">
            <summary>
            One hour
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesStreamKlineInterval.TwoHours">
            <summary>
            Two hours
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesStreamKlineInterval.FourHours">
            <summary>
            Four hours
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesStreamKlineInterval.OneDay">
            <summary>
            One day
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesStreamKlineInterval.OneWeek">
            <summary>
            One week
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.FuturesTransferStatus">
            <summary>
            Transfer status
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesTransferStatus.Processing">
            <summary>
            Processing
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesTransferStatus.Finished">
            <summary>
            Finished
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesTransferStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.FuturesTransferType">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesTransferType.SpotToContract">
            <summary>
            Spot to contract
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.FuturesTransferType.ContractToSpot">
            <summary>
            Contract to spot
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.KlineInterval">
            <summary>
            Kline interval
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineInterval.OneMinute">
            <summary>
            One minute
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineInterval.ThreeMinutes">
            <summary>
            Three minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineInterval.FiveMinutes">
            <summary>
            Five minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineInterval.FifteenMinutes">
            <summary>
            Fifteen minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineInterval.ThirtyMinutes">
            <summary>
            Thirty minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineInterval.FourtyFiveMinutes">
            <summary>
            Fourty five minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineInterval.OneHour">
            <summary>
            One hour
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineInterval.TwoHours">
            <summary>
            Two hours
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineInterval.ThreeHours">
            <summary>
            Three hours
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineInterval.FourHours">
            <summary>
            Four hours
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineInterval.OneDay">
            <summary>
            One day
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineInterval.OneWeek">
            <summary>
            One week
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineInterval.OneMonth">
            <summary>
            One month
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.KlineStreamInterval">
            <summary>
            kline interval
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineStreamInterval.OneMinute">
            <summary>
            One minute
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineStreamInterval.FiveMinutes">
            <summary>
            Five minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineStreamInterval.FifteenMinutes">
            <summary>
            Fifteen minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineStreamInterval.ThirtyMinutes">
            <summary>
            Thirty minutes
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineStreamInterval.OneHour">
            <summary>
            One hour
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineStreamInterval.TwoHours">
            <summary>
            Two hours
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineStreamInterval.FourHours">
            <summary>
            Four hours
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineStreamInterval.OneDay">
            <summary>
            One day
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineStreamInterval.OneWeek">
            <summary>
            One week
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.KlineStreamInterval.OneMonth">
            <summary>
            One month
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.MarginType">
            <summary>
            Margin type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.MarginType.CrossMargin">
            <summary>
            Cross margin
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.MarginType.IsolatedMargin">
            <summary>
            Isolated margin
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.OperationType">
            <summary>
            Operation type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OperationType.Deposit">
            <summary>
            Deposit
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OperationType.Withdrawal">
            <summary>
            Withdrawal
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.OrderBookSide">
            <summary>
            Side of the book
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderBookSide.Bids">
            <summary>
            Bids
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderBookSide.Asks">
            <summary>
            Asks
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.OrderEvent">
            <summary>
            Order event type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderEvent.Trade">
            <summary>
            Trade filled
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderEvent.Submit">
            <summary>
            Order submitted
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderEvent.Cancel">
            <summary>
            Order canceled
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderEvent.LiquidationCancel">
            <summary>
            Liquidate cancel order
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderEvent.AdlCancel">
            <summary>
            Adl cancel order
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderEvent.PartialLiquidation">
            <summary>
            Partial liquidate
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderEvent.Bankruptcy">
            <summary>
            Bankruptcy order
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderEvent.PassiveAdlTrade">
            <summary>
            Passive Adl trade
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderEvent.ActiveAdlTrade">
            <summary>
            Active adl trade
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.OrderMode">
            <summary>
            Order mode
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderMode.GoodTilCancel">
            <summary>
            Good till canceled
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderMode.FillOrKill">
            <summary>
            Fill entirely or cancel
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderMode.ImmediateOrCancel">
            <summary>
            Fill at least partially or cancel
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderMode.PostOnly">
            <summary>
            Post only
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.OrderQueryState">
            <summary>
            Order state filter
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderQueryState.Open">
            <summary>
            Active order
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderQueryState.History">
            <summary>
            Closed order
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.OrderSide">
            <summary>
            Order side
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.OrderStatus">
            <summary>
            Order status
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderStatus.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderStatus.PartiallyFilled">
            <summary>
            Partially filled
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderStatus.Filled">
            <summary>
            Filled
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderStatus.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderStatus.PartiallyCanceled">
            <summary>
            Partially canceled
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderStatus.Failed">
            <summary>
            Order failed
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.OrderStatusQuery">
            <summary>
            Order status query filter
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderStatusQuery.All">
            <summary>
            All orders
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderStatusQuery.PartiallyFilled">
            <summary>
            Partially filled
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderType.Limit">
            <summary>
            Limit order
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderType.Market">
            <summary>
            Market order
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderType.LimitMaker">
            <summary>
            Limit maker order
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.OrderType.ImmediateOrCancel">
            <summary>
            Immediate or cancel order
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.PlanCategory">
            <summary>
            Trigger order category
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.PlanCategory.TpSl">
            <summary>
            Take profit / Stop loss
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.PlanCategory.PositionTpSl">
            <summary>
            Position Take profit / Stop loss
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.PositionSide.Long">
            <summary>
            Long
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.PositionSide.Short">
            <summary>
            Short
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.PriceDirection">
            <summary>
            Price direction
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.PriceDirection.LongDirection">
            <summary>
            Long direction
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.PriceDirection.ShortDirection">
            <summary>
            Short direction
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.ServiceType">
            <summary>
            System type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.ServiceType.SpotApiService">
            <summary>
            Spot API service
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.ServiceType.ContractApiService">
            <summary>
            Contract API service
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.ServiceType.AccountApiService">
            <summary>
            Account API service
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.SpotMode">
            <summary>
            Spot mode
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.SpotMode.Spot">
            <summary>
            Spot
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.SpotMode.IsolatedMargin">
            <summary>
            Isolated margin
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.SubAccountStatus">
            <summary>
            Sub account status
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.SubAccountStatus.Disabled">
            <summary>
            Disabled in background
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.SubAccountStatus.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.SubAccountStatus.FrozenByMainAccount">
            <summary>
            Frozen by main account
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.SymbolStatus">
            <summary>
            Symbol status
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.SymbolStatus.Trading">
            <summary>
            Trading
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.SymbolStatus.PreTrade">
            <summary>
            Pre-trade
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.SystemMaintenanceStatus">
            <summary>
            System status
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.SystemMaintenanceStatus.Pending">
            <summary>
            Waiting for start
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.SystemMaintenanceStatus.Working">
            <summary>
            Currently executing
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.SystemMaintenanceStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.TplSlOrderType">
            <summary>
            TakeProfit/StopLoss order type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.TplSlOrderType.TakeProfit">
            <summary>
            Take profit order
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.TplSlOrderType.StopLoss">
            <summary>
            Stop loss order
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.TradeRole">
            <summary>
            Trade role
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.TradeRole.Maker">
            <summary>
            Maker
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.TradeRole.Taker">
            <summary>
            Taker
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.TransferDirection">
            <summary>
            Transfer direction
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.TransferDirection.TransferIn">
            <summary>
            Transfer in
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.TransferDirection.TransferOut">
            <summary>
            Transfer out
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.TriggerOrderType">
            <summary>
            Trigger order type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.TriggerOrderType.Plan">
            <summary>
            Plan order
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.TriggerOrderType.TakeProfit">
            <summary>
            Take profit order
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.TriggerOrderType.StopLoss">
            <summary>
            Stop loss order
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.TriggerPlanType">
            <summary>
            Trigger plan type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.TriggerPlanType.Plan">
            <summary>
            Plan
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.TriggerPlanType.ProfitLoss">
            <summary>
            Profit loss
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.TriggerPriceType">
            <summary>
            Trigger price type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.TriggerPriceType.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.TriggerPriceType.FairPrice">
            <summary>
            Fair price
            </summary>
        </member>
        <member name="T:BitMart.Net.Enums.WithdrawalAddressType">
            <summary>
            Withdrawal address type
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.WithdrawalAddressType.Standard">
            <summary>
            Standard address
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.WithdrawalAddressType.Universal">
            <summary>
            Universal address
            </summary>
        </member>
        <member name="F:BitMart.Net.Enums.WithdrawalAddressType.Evm">
            <summary>
            EVM address
            </summary>
        </member>
        <member name="T:BitMart.Net.ExtensionMethods.BitMartExtensionMethods">
            <summary>
            Extension methods specific to using the BitMart API
            </summary>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.IBitMartRestClient">
            <summary>
            Client for accessing the BitMart Rest API. 
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.IBitMartRestClient.UsdFuturesApi">
            <summary>
            UsdFutures API endpoints
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.IBitMartRestClient.SpotApi">
            <summary>
            Spot API endpoints
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.IBitMartRestClient.SetOptions(CryptoExchange.Net.Objects.Options.UpdateOptions)">
            <summary>
            Update specific options
            </summary>
            <param name="options">Options to update. Only specific options are changable after the client has been created</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.IBitMartRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.IBitMartSocketClient">
            <summary>
            Client for accessing the BitMart websocket API
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.IBitMartSocketClient.UsdFuturesApi">
            <summary>
            UsdFutures API endpoints
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.IBitMartSocketClient.SpotApi">
            <summary>
            Spot API endpoints
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.IBitMartSocketClient.SetOptions(CryptoExchange.Net.Objects.Options.UpdateOptions)">
            <summary>
            Update specific options
            </summary>
            <param name="options">Options to update. Only specific options are changable after the client has been created</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.IBitMartSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApi">
            <summary>
            BitMart Spot API endpoints
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApi.Margin">
            <summary>
            Endpoints related to margin borrow and repayment
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApi.SubAccount">
            <summary>
            Endpoints related to sub account management
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApi.CommonSpotClient">
            <summary>
            DEPRECATED; use <see cref="T:CryptoExchange.Net.SharedApis.ISharedClient" /> instead for common/shared functionality. See <see href="https://jkorf.github.io/CryptoExchange.Net/docs/index.html#shared" /> for more info.
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApi.SharedClient">
            <summary>
            Get the shared rest requests client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount">
            <summary>
            BitMart Spot account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount.GetFundingBalancesAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get funding account balances
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-account-balance-keyed" /></para>
            </summary>
            <param name="asset">Filter on asset, for example `ETH`</param>
            <param name="needUsdValuation">Include USD valuation</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount.GetSpotBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get spot account balances
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-spot-wallet-balance-keyed" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get deposit address
            <para><a href="https://developer-pro.bitmart.com/en/spot/#deposit-address-keyed" /></para>
            </summary>
            <param name="asset">The asset, for example `ETH`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount.GetWithdrawalQuotaAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get withdrawal quotas
            <para><a href="https://developer-pro.bitmart.com/en/spot/#withdraw-quota-keyed" /></para>
            </summary>
            <param name="asset">Asset, for example `ETH`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount.WithdrawAsync(System.String,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw funds
            <para><a href="https://developer-pro.bitmart.com/en/spot/#withdraw-signed" /></para>
            </summary>
            <param name="asset">The asset, for example `ETH`</param>
            <param name="quantity">Quantity to withdraw</param>
            <param name="targetAddress">Target blockchain address</param>
            <param name="memo">Memo</param>
            <param name="remark">Remark</param>
            <param name="accountDestType">Account destination type for internal withdrawal</param>
            <param name="targetAccount">Target account</param>
            <param name="areaCode">Area phone code</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get deposit history
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-deposit-and-withdraw-history-keyed" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results, max 1000</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get withdrawal history
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-deposit-and-withdraw-history-keyed" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results, max 1000</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount.GetDepositWithdrawalAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a specific withdrawal or deposit
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-a-deposit-or-withdraw-detail-keyed" /></para>
            </summary>
            <param name="id">The deposit or withdrawal id</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount.GetIsolatedMarginAccountsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get isolated margin account info
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-margin-account-details-isolated-keyed" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH_USDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount.IsolatedMarginTransferAsync(System.String,System.String,System.Decimal,BitMart.Net.Enums.TransferDirection,System.Threading.CancellationToken)">
            <summary>
            Transfer asset between Spot and Isolated Margin account
            <para><a href="https://developer-pro.bitmart.com/en/spot/#margin-asset-transfer-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="asset">The asset, for example `ETH`</param>
            <param name="quantity">Quantity to transfer</param>
            <param name="direction">Direction</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount.GetBaseTradeFeesAsync(System.Threading.CancellationToken)">
            <summary>
            Get base trading fees
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-basic-fee-rate-keyed" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount.GetSymbolTradeFeeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get trading fees for a specific symbol
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-actual-trade-fee-rate-keyed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiAccount.GetWithdrawalAddressesAsync(System.Threading.CancellationToken)">
            <summary>
            Get withdrawal addresses
            <para><a href="https://developer-pro.bitmart.com/en/spot/#withdraw-address-keyed" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiExchangeData">
            <summary>
            BitMart Spot exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiExchangeData.GetServerStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Get server status
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-system-service-status" /></para>
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get server time
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-system-time" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiExchangeData.GetAssetsAsync(System.Threading.CancellationToken)">
            <summary>
            Get supported assets list
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-currency-list-v1" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Get supported symbols list
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-trading-pair-details-v1" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiExchangeData.GetSymbolNamesAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of supported symbol names
            <para><a href="https://openapi-doc.bitmart.com/en/spot/#get-trading-pairs-list-v1" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get price ticker for a symbol
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-ticker-of-a-trading-pair-v3" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            Get price tickers for all symbols
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-ticker-of-all-pairs-v3" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiExchangeData.GetAssetDepositWithdrawInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get deposit and withdrawal info for assets
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-currencies" /></para>
            </summary>
            <param name="asset">Filter by asset. Can specify up to 20 assets comma separated</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiExchangeData.GetKlinesAsync(System.String,BitMart.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get kline/candlesticks
            <para><a href="https://openapi-doc.bitmart.com/en/spot/#get-latest-k-line-v3" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="klineInterval">The interval</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiExchangeData.GetKlineHistoryAsync(System.String,BitMart.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get historical klines
            <para><a href="https://openapi-doc.bitmart.com/en/spot/#get-history-k-line-v3" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="klineInterval">Kline interval</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiExchangeData.GetTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get recent trades
            <para><a href="https://openapi-doc.bitmart.com/en/spot/#get-recent-trades-v3" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the current order book
            <para><a href="https://openapi-doc.bitmart.com/en/spot/#get-depth-v3" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="limit">Max number of rows in the book</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiMargin">
            <summary>
            BitMart margin endpoints
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiMargin.BorrowAsync(System.String,System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Borrow an asset
            <para><a href="https://developer-pro.bitmart.com/en/spot/#margin-borrow-isolated-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="asset">The asset, for example `ETH`</param>
            <param name="quantity">Quantity to borrow</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiMargin.RepayAsync(System.String,System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Repay an asset
            <para><a href="https://developer-pro.bitmart.com/en/spot/#margin-repay-isolated-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="asset">The asset, for example `ETH`</param>
            <param name="quantity">Quantity to repay</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiMargin.GetBorrowHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get borrow history
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-borrow-record-isolated-keyed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="borrowId">Filter by borrow id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiMargin.GetRepayHistoryAsync(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get repayment history
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-repayment-record-isolated-keyed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="asset">Filter by asset, for example `ETH`</param>
            <param name="repayId">Filter by repay id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiMargin.GetBorrowInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get borrow rate and quantity info
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-trading-pair-borrowing-rate-and-amount-keyed" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH_USDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiShared">
            <summary>
            Shared interface for Spot rest API usage
            </summary>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiSubAccount">
            <summary>
            BitMart subaccount endpoints
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiSubAccount.TransferSubToMainForMainAsync(System.String,System.String,System.Decimal,System.String,System.Threading.CancellationToken)">
            <summary>
            Transfer from sub account to main account, usable from main account
            <para><a href="https://developer-pro.bitmart.com/en/spot/#sub-account-to-main-account-for-main-account-signed" /></para>
            </summary>
            <param name="clientOrderId">Unique identifier</param>
            <param name="asset">The asset, for example `ETH`</param>
            <param name="quantity">Quantity to transfer</param>
            <param name="subAccount">Sub account user name</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiSubAccount.TransferSubToMainForSubAsync(System.String,System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Transfer from sub account to main account, usable from sub account
            <para><a href="https://developer-pro.bitmart.com/en/spot/#sub-account-to-main-account-for-sub-account-signed" /></para>
            </summary>
            <param name="clientOrderId">Unique identifier</param>
            <param name="asset">The asset, for example `ETH`</param>
            <param name="quantity">Quantity to transfer</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiSubAccount.TransferMainToSubAccountAsync(System.String,System.String,System.Decimal,System.String,System.Threading.CancellationToken)">
            <summary>
            Transfer from main account to a sub account
            <para><a href="https://developer-pro.bitmart.com/en/spot/#main-account-to-sub-account-for-main-account-signed" /></para>
            </summary>
            <param name="clientOrderId">Unique identifier</param>
            <param name="asset">The asset, for example `ETH`</param>
            <param name="quantity">Quantity to transfer</param>
            <param name="subAccount">Sub account name</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiSubAccount.TransferSubAccountToSubAccountAsync(System.String,System.Decimal,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Transfer from sub account to another sub account
            <para><a href="https://developer-pro.bitmart.com/en/spot/#sub-account-to-sub-account-for-main-account-signed" /></para>
            </summary>
            <param name="clientOrderId">Unique identifier</param>
            <param name="quantity">Quantity to transfer</param>
            <param name="asset">The asset, for example `ETH`</param>
            <param name="fromAccount">Source sub account name</param>
            <param name="toAccount">Target sub account name</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiSubAccount.GetSubAccountTransferHistoryForMainAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Get sub account transfer history for main account
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-sub-account-transfer-history-for-main-account-keyed" /></para>
            </summary>
            <param name="account">Filter by account name</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiSubAccount.GetSubAccountTransferHistoryAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get sub accont transfer history 
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-account-spot-asset-transfer-history-for-main-sub-account-keyed" /></para>
            </summary>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiSubAccount.GetSubAcccountBalanceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the balance of a sub account
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-sub-account-spot-wallet-balance-for-main-account-keyed" /></para>
            </summary>
            <param name="subAccount">Sub account name</param>
            <param name="asset">Filter by asset, for example `ETH`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiSubAccount.GetSubAccountListAsync(System.Threading.CancellationToken)">
            <summary>
            Get list of sub accounts
            <para><a href="https://developer-pro.bitmart.com/en/spot/#get-sub-account-list-for-main-account-keyed" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiTrading">
            <summary>
            BitMart Spot trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiTrading.PlaceOrderAsync(System.String,BitMart.Net.Enums.OrderSide,BitMart.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://developer-pro.bitmart.com/en/spot/#new-order-v2-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="price">Limit price</param>
            <param name="quoteQuantity">Quantity in quote asset for market orders</param>
            <param name="clientOrderId">Client order id</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiTrading.PlaceMultipleOrdersAsync(System.String,System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartOrderRequest},System.Threading.CancellationToken)">
            <summary>
            Place multiple orders in one call
            <para><a href="https://developer-pro.bitmart.com/en/spot/#new-batch-order-v4-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="orders">Order parameters</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiTrading.CancelOrderAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an open order
            <para><a href="https://developer-pro.bitmart.com/en/spot/#cancel-order-v3-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="orderId">Cancel by order id. Either this or clientOrderId should be provided</param>
            <param name="clientOrderId">Cancel by client order Id. Either this or orderId should be provided</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiTrading.CancelOrdersAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Cancel multiple orders
            <para><a href="https://developer-pro.bitmart.com/en/spot/#cancel-batch-order-v4-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="orderIds">Order ids to cancel. Either this or clientOrderIds should be provided</param>
            <param name="clientOrderIds">Client order ids to cancel. Either this or orderIds should be provided</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiTrading.CancelAllOrderAsync(System.String,System.Nullable{BitMart.Net.Enums.OrderSide},System.Threading.CancellationToken)">
            <summary>
            Cancel all orders matching the parameters
            <para><a href="https://developer-pro.bitmart.com/en/spot/#cancel-all-order-v4-signed" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH_USDT`</param>
            <param name="side">Filter by order side</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiTrading.PlaceMarginOrderAsync(System.String,BitMart.Net.Enums.OrderSide,BitMart.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Threading.CancellationToken)">
            <summary>
            Place a new margin order
            <para><a href="https://developer-pro.bitmart.com/en/spot/#new-margin-order-v1-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="price">Limit price</param>
            <param name="quoteQuantity">Quantity in quote asset for market orders</param>
            <param name="clientOrderId">Client order id</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiTrading.GetOrderAsync(System.String,System.Nullable{BitMart.Net.Enums.OrderQueryState},System.Threading.CancellationToken)">
            <summary>
            Get order details
            <para><a href="https://developer-pro.bitmart.com/en/spot/#query-order-by-id-v4-signed" /></para>
            </summary>
            <param name="orderId">Id of the order</param>
            <param name="orderQueryState">Order status. If known speeds up the request</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiTrading.GetOrderByClientOrderIdAsync(System.String,System.Nullable{BitMart.Net.Enums.OrderQueryState},System.Threading.CancellationToken)">
            <summary>
            Get order details by client order id
            <para><a href="https://developer-pro.bitmart.com/en/spot/#query-order-by-clientorderid-v4-signed" /></para>
            </summary>
            <param name="clientOrderId">Client order id</param>
            <param name="orderQueryState">Order status. If known speeds up the request</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{BitMart.Net.Enums.SpotMode},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get current open orders
            <para><a href="https://developer-pro.bitmart.com/en/spot/#current-open-orders-v4-signed" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH_USDT`</param>
            <param name="spotOrderMode">Filter by order mode</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{BitMart.Net.Enums.SpotMode},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get closed orders
            <para><a href="https://developer-pro.bitmart.com/en/spot/#account-orders-v4-signed" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH_USDT`</param>
            <param name="spotOrderMode">Filter spot order more</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiTrading.GetUserTradesAsync(System.String,System.Nullable{BitMart.Net.Enums.SpotMode},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get list of user trades
            <para><a href="https://developer-pro.bitmart.com/en/spot/#account-trade-list-v4-signed" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETH_USDT`</param>
            <param name="spotOrderMode">Filter by order mode</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientSpotApiTrading.GetOrderTradesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get trades for a specific order
            <para><a href="https://developer-pro.bitmart.com/en/spot/#order-trade-list-v4-signed" /></para>
            </summary>
            <param name="orderId">The order id</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi">
            <summary>
            BitMart Spot streams
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi.SharedClient">
            <summary>
            Get the shared socket subscription client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to price ticker updates for a symbol
            <para><a href="https://developer-pro.bitmart.com/en/spot/#public-ticker-channel" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to price ticker updates for multiple symbols
            <para><a href="https://developer-pro.bitmart.com/en/spot/#public-ticker-channel" /></para>
            </summary>
            <param name="symbols">The symbols, for example `ETH_USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi.SubscribeToKlineUpdatesAsync(System.String,BitMart.Net.Enums.KlineStreamInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline/candlestick updates for a symbol
            <para><a href="https://developer-pro.bitmart.com/en/spot/#public-kline-channel" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH_USDT`</param>
            <param name="interval">Kline interval</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},BitMart.Net.Enums.KlineStreamInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline/candlestick updates for multiple symbols
            <para><a href="https://developer-pro.bitmart.com/en/spot/#public-kline-channel" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETH_USDT`</param>
            <param name="interval">Kline interval</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to full order book updates of the first x order book records
            <para><a href="https://developer-pro.bitmart.com/en/spot/#public-depth-all-channel" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETH_USDT`</param>
            <param name="depth">Order book depth, 5, 20 or 50</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to full order book updates of the first x order book records
            <para><a href="https://developer-pro.bitmart.com/en/spot/#public-depth-all-channel" /></para>
            </summary>
            <param name="symbols">The symbols, for example `ETH_USDT`</param>
            <param name="depth">Order book depth, 5, 20 or 50</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartOrderBookIncrementalUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates. An initial snapshot will be pushed, followed by change updates
            <para><a href="https://developer-pro.bitmart.com/en/spot/#public-depth-increase-channel" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH_USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartOrderBookIncrementalUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates. An initial snapshot will be pushed, followed by change updates
            <para><a href="https://developer-pro.bitmart.com/en/spot/#public-depth-increase-channel" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETH_USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to trade updates for a symbol
            <para><a href="https://developer-pro.bitmart.com/en/spot/#public-trade-channel" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETH_USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to trade updates for multiple symbols
            <para><a href="https://developer-pro.bitmart.com/en/spot/#public-trade-channel" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETH_USDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user order updates
            <para><a href="https://developer-pro.bitmart.com/en/spot/#private-order-progress" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartBalanceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user balance updates
            <para><a href="https://developer-pro.bitmart.com/en/spot/#private-balance-change" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartSocketClientSpotApiShared">
            <summary>
            Shared interface for Spot socket API usage
            </summary>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.SpotApi.IBitMartRestClientUsdFuturesApiShared">
            <summary>
            Shared interface for Usd futures rest API usage
            </summary>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApi">
            <summary>
            BitMart UsdFutures API endpoints
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApi.SubAccount">
            <summary>
            Endpoints related to sub account management
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApi.SharedClient">
            <summary>
            Get the shared rest requests client. This interface is shared with other exhanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiAccount">
            <summary>
            BitMart UsdFutures account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get account balances
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-contract-assets-keyed" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiAccount.GetTransferHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get account transfer history
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-transfer-list-signed" /></para>
            </summary>
            <param name="asset">Filter by asset, for example `USDT`</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page number</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiAccount.TransferAsync(System.String,System.Decimal,BitMart.Net.Enums.FuturesTransferType,System.Threading.CancellationToken)">
            <summary>
            Transfer between futures and spot account
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#transfer-signed" /></para>
            </summary>
            <param name="asset">The asset, for example `USDT`</param>
            <param name="quantity">Quantity to transfer</param>
            <param name="type">Transfer direction</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiAccount.SetLeverageAsync(System.String,System.Decimal,BitMart.Net.Enums.MarginType,System.Threading.CancellationToken)">
            <summary>
            Set leverage
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#submit-leverage-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="leverage">Leverage</param>
            <param name="marginType">Open type, required at close position</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiAccount.GetSymbolTradeFeeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get symbol trading fee
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-trade-fee-rate-keyed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiAccount.GetTransactionHistoryAsync(System.String,System.Nullable{BitMart.Net.Enums.FlowType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get transaction history
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-transaction-history-keyed" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for Example `ETHUSDT`</param>
            <param name="flowType">Filter by type</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results, max 1000</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiExchangeData">
            <summary>
            BitMart UsdFutures exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiExchangeData.GetContractsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get contracts
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-contract-details" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiExchangeData.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the current order book
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-market-depth" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiExchangeData.GetOpenInterestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get open interest for a symbol
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-futures-openinterest" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiExchangeData.GetCurrentFundingRateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the current funding rate for a symbol
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-current-funding-rate" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiExchangeData.GetKlinesAsync(System.String,BitMart.Net.Enums.FuturesKlineInterval,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Get kline/candlestick data
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-k-line" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="klineInterval">Kline interval</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiExchangeData.GetMarkKlinesAsync(System.String,BitMart.Net.Enums.FuturesKlineInterval,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Get mark price klines
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-markprice-k-line" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="klineInterval">Kline interval</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiExchangeData.GetFundingRateHistoryAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-funding-rate-history" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="limit">Max number of results, max 100</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiSubAccount">
            <summary>
            BitMart UsdFutures sub-account endpoints
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiSubAccount.TransferSubToMainForMainAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Transfer from sub futures account to main account, for main account
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#sub-account-to-main-account-for-main-account-signed" /></para>
            </summary>
            <param name="asset">The asset, for example `USDT`</param>
            <param name="quantity">Quantity</param>
            <param name="subAccount">Sub account name</param>
            <param name="clientOrderId">Unique identifier</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiSubAccount.TransferMainToSubForMainAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Transfer from main account to sub futures acount
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#main-account-to-sub-account-for-main-account-signed" /></para>
            </summary>
            <param name="asset">The asset, for example `USDT`</param>
            <param name="quantity">Quantity</param>
            <param name="subAccount">Sub account name</param>
            <param name="clientOrderId">Unique identifier</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiSubAccount.TransferSubToMainForSubAsync(System.String,System.Decimal,System.String,System.Threading.CancellationToken)">
            <summary>
            Transfer from sub futures account to main account, for sub account
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#sub-account-to-main-account-for-sub-account-signed" /></para>
            </summary>
            <param name="asset">The asset, for example `USDT`</param>
            <param name="quantity">Quantity</param>
            <param name="clientOrderId">Unique identifier</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiSubAccount.GetSubAcccountBalanceAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get sub account futures balances
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-sub-account-futures-wallet-balance-for-main-account-keyed" /></para>
            </summary>
            <param name="subAccount">Sub account name</param>
            <param name="asset">The asset, for example `USDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiSubAccount.GetSubAccountTransferHistoryForMainAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get sub account transfer history, for main account
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-sub-account-transfer-history-for-main-account-keyed" /></para>
            </summary>
            <param name="subAccount">Sub account name</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiSubAccount.GetSubAccountTransferHistoryAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get sub account transfer history
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-account-futures-asset-transfer-history-for-main-sub-account-keyed" /></para>
            </summary>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading">
            <summary>
            BitMart UsdFutures trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.GetOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get an order by id
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-order-detail-keyed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="orderId">Order id</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get order history
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-order-history-keyed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.GetOpenOrdersAsync(System.String,System.Nullable{BitMart.Net.Enums.FuturesOrderType},System.Nullable{BitMart.Net.Enums.OrderStatusQuery},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get open orders
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-all-open-orders-keyed" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="orderType">Filter by order type</param>
            <param name="status">Filter by order status</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.GetTriggerOrdersAsync(System.String,System.Nullable{BitMart.Net.Enums.OrderType},System.Nullable{System.Int32},System.Nullable{BitMart.Net.Enums.TriggerPlanType},System.Threading.CancellationToken)">
            <summary>
            Get open trigger orders
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-all-current-plan-orders-keyed" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="type">Filter by order type</param>
            <param name="limit">Max number of results</param>
            <param name="planType">Filter by plan type</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.GetPositionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get current positions
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-current-position-keyed" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.GetPositionRiskAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get position risk
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-current-position-risk-details-keyed" /></para>
            </summary>
            <param name="symbol">Filter by symbol, for example `ETHUSDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get user trades
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#get-order-trade-keyed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.PlaceOrderAsync(System.String,BitMart.Net.Enums.FuturesSide,BitMart.Net.Enums.FuturesOrderType,System.Int32,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{BitMart.Net.Enums.MarginType},System.Nullable{BitMart.Net.Enums.OrderMode},System.Nullable{BitMart.Net.Enums.TriggerPriceType},System.Nullable{BitMart.Net.Enums.TriggerPriceType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#submit-order-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity in number of contracts</param>
            <param name="price">Limit price</param>
            <param name="clientOrderId">Client order id</param>
            <param name="leverage">Leverage</param>
            <param name="marginType">Margin type</param>
            <param name="orderMode">Order mode</param>
            <param name="presetTakeProfitPriceType">Take profit price type</param>
            <param name="presetStopLossPriceType">Stop loss price type</param>
            <param name="presetTakeProfitPrice">Take profit price</param>
            <param name="presetStopLossPrice">Stop loss price</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.PlaceTrailingOrderAsync(System.String,BitMart.Net.Enums.FuturesSide,System.Int32,System.Decimal,BitMart.Net.Enums.MarginType,System.Decimal,System.Decimal,BitMart.Net.Enums.TriggerPriceType,System.Threading.CancellationToken)">
            <summary>
            Place a new trailling stop order
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#submit-trail-order-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="side">Order side</param>
            <param name="quantity">Quantity in number of contracts</param>
            <param name="leverage">Leverage</param>
            <param name="marginType">Margin type</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="callbackRate">Trailing order callback rate</param>
            <param name="triggerPriceType">Trigger price type</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.CancelTrailingOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel a trailing stop order
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#cancel-trail-order-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="orderId">Order id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.CancelOrderAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an active order
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#cancel-order-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="orderId">The order id, either this or clientOrderId should be provided</param>
            <param name="clientOrderId">The client order id, either this or orderId should be provided</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.CancelOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel all orders on a symbol
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#cancel-all-orders-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.PlaceTriggerOrderAsync(System.String,BitMart.Net.Enums.OrderType,BitMart.Net.Enums.FuturesSide,System.Int32,System.Decimal,BitMart.Net.Enums.MarginType,System.Decimal,BitMart.Net.Enums.PriceDirection,BitMart.Net.Enums.TriggerPriceType,System.Nullable{BitMart.Net.Enums.OrderMode},System.Nullable{System.Decimal},System.Nullable{BitMart.Net.Enums.PlanCategory},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{BitMart.Net.Enums.TriggerPriceType},System.Nullable{BitMart.Net.Enums.TriggerPriceType},System.Threading.CancellationToken)">
            <summary>
            Place a new trigger order
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#submit-plan-order-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="orderType">The order type</param>
            <param name="side">Side</param>
            <param name="quantity">Quantity</param>
            <param name="leverage">Order leverage</param>
            <param name="marginType">Margin type</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="priceDirection">Price direction</param>
            <param name="triggerPriceType">Trigger price type</param>
            <param name="orderMode">Mode</param>
            <param name="orderPrice">Order price for limit order</param>
            <param name="planCategory">Plan category</param>
            <param name="takeProfitPrice">Take profit price</param>
            <param name="stopLossPrice">Stop loss price</param>
            <param name="takeProfitPriceType">Take profit price type</param>
            <param name="stopLossPriceType">Stop loss price type</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.CancelTriggerOrderAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel a trigger order
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#cancel-plan-order-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="orderId">The order id, either this or clientOrderId should be provided</param>
            <param name="clientOrderId">The client order id, either this or orderId should be provided</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.PlaceTpSlOrderAsync(System.String,BitMart.Net.Enums.TplSlOrderType,BitMart.Net.Enums.FuturesSide,System.Decimal,BitMart.Net.Enums.TriggerPriceType,BitMart.Net.Enums.PlanCategory,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.Nullable{BitMart.Net.Enums.OrderType},System.Threading.CancellationToken)">
            <summary>
            Place a new tp/sl order
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#submit-tp-or-sl-order-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="tpSlType">Take profit or stop loss</param>
            <param name="orderSide">Order side, either BuyCloseShort or SellCloseLong</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="priceType">Trigger price type</param>
            <param name="planCategory">Plan category</param>
            <param name="executionPrice">Execution price</param>
            <param name="quantity">Quantity to close. Defaults to position size</param>
            <param name="clientOrderId">Client order id</param>
            <param name="triggerOrderType">Type of order to place when triggered</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.EditTpSlOrderAsync(System.String,System.Decimal,BitMart.Net.Enums.TriggerPriceType,BitMart.Net.Enums.PlanCategory,BitMart.Net.Enums.OrderType,System.String,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Edit an existing tp/sl order
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#modify-tp-sl-order-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="orderId">Order id, either this or clientOrderId should be provided</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="executionPrice">Execution price</param>
            <param name="priceType">Price type</param>
            <param name="planCategory">Plan category</param>
            <param name="orderType">Order type</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.EditTriggerOrderAsync(System.String,System.Decimal,BitMart.Net.Enums.TriggerPriceType,BitMart.Net.Enums.OrderType,System.String,System.String,System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Edit an existing plan order
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#modify-plan-order-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="orderId">Order id, either this or clientOrderId should be provided</param>
            <param name="clientOrderId">Client order id, either this or orderId should be provided</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="executionPrice">Execution price</param>
            <param name="priceType">Price type</param>
            <param name="orderType">Order type</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartRestClientUsdFuturesApiTrading.EditPresetTriggerOrderAsync(System.String,System.String,BitMart.Net.Enums.TriggerPriceType,BitMart.Net.Enums.TriggerPriceType,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Edit an preset plan order
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#modify-preset-plan-order-signed" /></para>
            </summary>
            <param name="symbol">The symbol, for example `ETHUSDT`</param>
            <param name="orderId">The order id</param>
            <param name="takeProfitPriceType">Take profit price type</param>
            <param name="stopLossPriceType">Stop loss price type</param>
            <param name="takeProfitPrice">Take profit price</param>
            <param name="stopLossPrice">Stop loss price</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi">
            <summary>
            BitMart UsdFutures streams
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SharedClient">
            <summary>
            Get the shared socket subscription client. This interface is shared with other exchanges to allow for a common implementation for different exchanges.
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-ticker-channel" /></para>
            </summary>
            <param name="symbol">Symbol to subscribe</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-ticker-channel" /></para>
            </summary>
            <param name="symbols">Symbols to subscribe</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToTickerUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-ticker-channel" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartFuturesTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to trade updates for a symbol
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-trade-channel" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartFuturesTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to trade updates for multiple symbols
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-trade-channel" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToFundingRateUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFundingRateUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to funding rate updates for a symbol
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-funding-rate-channel" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToFundingRateUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFundingRateUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to funding rate updates for multiple symbols
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-funding-rate-channel" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates for a symbol
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-depth-channel" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="depth">Depth level, 5, 20 or 50</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates for multiple symbols
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-depth-channel" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="depth">Depth level, 5, 20 or 50</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToOrderBookSnapshotUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates for a symbol. Pushes the full order book depth with each update
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-depth-all-channel" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="depth">Depth level, 5, 20 or 50</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToOrderBookSnapshotUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates for multiple symbols. Pushes the full order book depth with each update
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-depth-all-channel" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="depth">Depth level, 5, 20 or 50</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToOrderBookIncrementalUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates for a symbol. First update is the snapshot, after that updates to the snapshot will be pushed
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-depth-all-channel" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="depth">Depth level, 5, 20 or 50</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToOrderBookIncrementalUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates for multiple symbols. First update is the snapshot, after that updates to the snapshot will be pushed
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-depth-all-channel" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="depth">Depth level, 5, 20 or 50</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartBookTicker}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates for the best ask/bid price for a symbol
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartBookTicker}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to updates for the best ask/bid price for a symbol
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToKlineUpdatesAsync(System.String,BitMart.Net.Enums.FuturesStreamKlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesKlineUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline/candlestick updates for a symbol
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-klinebin-channel" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="interval">Kline interval</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},BitMart.Net.Enums.FuturesStreamKlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesKlineUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline/candlestick updates for multiple symbols
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-klinebin-channel" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="interval">Kline interval</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToMarkKlineUpdatesAsync(System.String,BitMart.Net.Enums.FuturesStreamKlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesKlineUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe mark price kline/candlestick updates for multiple symbols
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-markprice-klinebin-channel" /></para>
            </summary>
            <param name="symbol">Symbol, for example `ETHUSDT`</param>
            <param name="interval">Kline interval</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToMarkKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},BitMart.Net.Enums.FuturesStreamKlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesKlineUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe mark price kline/candlestick updates for multiple symbols
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#public-markprice-klinebin-channel" /></para>
            </summary>
            <param name="symbols">Symbols, for example `ETHUSDT`</param>
            <param name="interval">Kline interval</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BitMart.Net.Objects.Models.BitMartFuturesBalanceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to balance updates
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#private-assets-channel" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartPositionUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to position updates
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#private-position-channel" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApi.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{System.Collections.Generic.IEnumerable{BitMart.Net.Objects.Models.BitMartFuturesOrderUpdateEvent}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order updates
            <para><a href="https://developer-pro.bitmart.com/en/futuresv2/#private-order-channel" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:BitMart.Net.Interfaces.Clients.UsdFuturesApi.IBitMartSocketClientUsdFuturesApiShared">
            <summary>
            Shared interface for Usd futures socket API usage
            </summary>
        </member>
        <member name="T:BitMart.Net.Interfaces.IBitMartOrderBookFactory">
            <summary>
            BitMart local order book factory
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.IBitMartOrderBookFactory.UsdFutures">
            <summary>
            UsdFutures order book factory methods
            </summary>
        </member>
        <member name="P:BitMart.Net.Interfaces.IBitMartOrderBookFactory.Spot">
            <summary>
            Spot order book factory methods
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.IBitMartOrderBookFactory.Create(CryptoExchange.Net.SharedApis.SharedSymbol,System.Action{BitMart.Net.Objects.Options.BitMartOrderBookOptions})">
            <summary>
            Create a SymbolOrderBook for the symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="options">Book options</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.IBitMartOrderBookFactory.CreateUsdFutures(System.String,System.Action{BitMart.Net.Objects.Options.BitMartOrderBookOptions})">
            <summary>
            Create a new UsdFutures local order book instance
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.IBitMartOrderBookFactory.CreateSpot(System.String,System.Action{BitMart.Net.Objects.Options.BitMartOrderBookOptions})">
            <summary>
            Create a new Spot local order book instance
            </summary>
        </member>
        <member name="T:BitMart.Net.Interfaces.IBitMartTrackerFactory">
            <summary>
            Tracker factory
            </summary>
        </member>
        <member name="M:BitMart.Net.Interfaces.IBitMartTrackerFactory.CreateKlineTracker(CryptoExchange.Net.SharedApis.SharedSymbol,CryptoExchange.Net.SharedApis.SharedKlineInterval,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <summary>
            Create a new kline tracker
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">Kline interval</param>
            <param name="limit">The max amount of klines to retain</param>
            <param name="period">The max period the data should be retained</param>
            <returns></returns>
        </member>
        <member name="M:BitMart.Net.Interfaces.IBitMartTrackerFactory.CreateTradeTracker(CryptoExchange.Net.SharedApis.SharedSymbol,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <summary>
            Create a new trade tracker for a symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="limit">The max amount of klines to retain</param>
            <param name="period">The max period the data should be retained</param>
            <returns></returns>
        </member>
        <member name="T:BitMart.Net.Objects.BitMartApiAddresses">
            <summary>
            Api addresses
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.BitMartApiAddresses.RestSpotClientAddress">
            <summary>
            The address used by the BitMartRestClient for the Spot API
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.BitMartApiAddresses.RestFuturesClientAddress">
            <summary>
            The address used by the BitMartRestClient for the Futures API
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.BitMartApiAddresses.SocketSpotClientAddress">
            <summary>
            The address used by the BitMartSocketClient for the websocket Spot API
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.BitMartApiAddresses.SocketPerpetualFuturesClientAddress">
            <summary>
            The address used by the BitMartSocketClient for the websocket Perpetual Futures API
            </summary>
        </member>
        <member name="F:BitMart.Net.Objects.BitMartApiAddresses.Default">
            <summary>
            The production environment for the BitMart API. Uses Futures V2.
            </summary>
        </member>
        <member name="F:BitMart.Net.Objects.BitMartApiAddresses.FuturesV1">
            <summary>
            Production environment, but uses Futures V1 instead of Futures V2.
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.BitMartApiCredentials">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Objects.BitMartApiCredentials.PassPhrase">
            <summary>
            API key memo/passphrase
            </summary>
        </member>
        <member name="M:BitMart.Net.Objects.BitMartApiCredentials.#ctor(System.String,System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="key">The API key</param>
            <param name="secret">The API secret</param>
            <param name="passPhrase">API key memo/passphrase</param>
        </member>
        <member name="M:BitMart.Net.Objects.BitMartApiCredentials.Copy">
            <summary>
            Copy
            </summary>
            <returns></returns>
        </member>
        <member name="P:BitMart.Net.Objects.Internal.BitMartResult.Result">
            <summary>
            Result
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartArrayTicker">
            <summary>
            Ticker/price statistics
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartArrayTicker.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartArrayTicker.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartArrayTicker.Volume24h">
            <summary>
            Volume over last 24h in base asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartArrayTicker.QuoteVolume24h">
            <summary>
            Volume over last 24h in quote asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartArrayTicker.OpenPrice">
            <summary>
            Open price 24h ago
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartArrayTicker.HighPrice">
            <summary>
            High price in last 24h
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartArrayTicker.LowPrice">
            <summary>
            Low price in last 24h
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartArrayTicker.Change">
            <summary>
            Price change factor
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartArrayTicker.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartArrayTicker.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartArrayTicker.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartArrayTicker.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartArrayTicker.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartAssetWrapper">
            <summary>
            
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAssetWrapper.Currencies">
            <summary>
            Currencies
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartAsset">
            <summary>
            Asset information
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAsset.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAsset.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAsset.WithdrawEnabled">
            <summary>
            Withdraw enabled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAsset.DepositEnabled">
            <summary>
            Deposit enabled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAssetDepositWithdrawInfoWrapper.Currencies">
            <summary>
            Currencies
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartAssetDepositWithdrawInfo">
            <summary>
            Deposit/withdrawal info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAssetDepositWithdrawInfo.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAssetDepositWithdrawInfo.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAssetDepositWithdrawInfo.ContractAddress">
            <summary>
            Contract address
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAssetDepositWithdrawInfo.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAssetDepositWithdrawInfo.WithdrawEnabled">
            <summary>
            Withdraw enabled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAssetDepositWithdrawInfo.DepositEnabled">
            <summary>
            Deposit enabled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAssetDepositWithdrawInfo.WithdrawMinsize">
            <summary>
            Withdraw minsize
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartAssetDepositWithdrawInfo.WithdrawMinfee">
            <summary>
            Withdraw minimal fee in USDT
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBalanceWrapper.Wallet">
            <summary>
            Wallet
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartBalance">
            <summary>
            Balance info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBalance.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBalance.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBalance.Available">
            <summary>
            Available
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBalance.AvailableUsdValuation">
            <summary>
            USD valuation
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBalance.Frozen">
            <summary>
            Frozen
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartBalanceUpdate">
            <summary>
            Balance update
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBalanceUpdate.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBalanceUpdate.Timestamp">
            <summary>
            Event time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBalanceUpdate.Balances">
            <summary>
            Updated balances
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartBalanceUpdateDetails">
            <summary>
            Asset info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBalanceUpdateDetails.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBalanceUpdateDetails.Available">
            <summary>
            Available balance
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBalanceUpdateDetails.Frozen">
            <summary>
            Frozen balance
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartBookTicker">
            <summary>
            Book ticker
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBookTicker.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBookTicker.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBookTicker.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBookTicker.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBookTicker.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBookTicker.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartBorrowId">
            <summary>
            Borrow id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartBorrowId.BorrowId">
            <summary>
            Borrow id
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartCancelOrdersResult">
            <summary>
            Cancel orders result
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartCancelOrdersResult.SuccessIds">
            <summary>
            Success ids
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartCancelOrdersResult.FailIds">
            <summary>
            Fail ids
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartCancelOrdersResult.TotalCount">
            <summary>
            Total count
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartCancelOrdersResult.SuccessCount">
            <summary>
            Success count
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartCancelOrdersResult.FailedCount">
            <summary>
            Failed count
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContractWrapper.Symbols">
            <summary>
            Symbols
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartContract">
            <summary>
            Contract info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.ProductType">
            <summary>
            Product type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.ExpireTime">
            <summary>
            Expire time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.SettleTime">
            <summary>
            Settle time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.Volume24h">
            <summary>
            Volume24h
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.Turnover24h">
            <summary>
            Turnover24h
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.IndexName">
            <summary>
            Index name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.ContractQuantity">
            <summary>
            Contract quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.MinLeverage">
            <summary>
            Min leverage
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.MaxLeverage">
            <summary>
            Max leverage
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.PricePrecision">
            <summary>
            Price precision
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.QuantityPrecision">
            <summary>
            Quantity precision
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.MaxQuantity">
            <summary>
            Max quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.MinQuantity">
            <summary>
            Min quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.FundingRate">
            <summary>
            Funding rate
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.ExpectedFundingRate">
            <summary>
            Expected funding rate
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.OpenInterest">
            <summary>
            Open interest
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.OpenInterestValue">
            <summary>
            Open interest value
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.HighPrice">
            <summary>
            High price last 24h
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.LowPrice">
            <summary>
            Low price last 24h
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.Change24h">
            <summary>
            Change in the last 24h
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.FundingIntervalHours">
            <summary>
            Interval of funding in hours
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartContract.MaxMarketOrderQuantity">
            <summary>
            Maximum market order quantity
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartDepositAddress">
            <summary>
            Deposit address info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositAddress.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositAddress.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositAddress.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositAddress.AddressMemo">
            <summary>
            Address memo
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositWithdrawalWrapper.Record">
            <summary>
            Record
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositWithdrawalHistoryWrapper.Records">
            <summary>
            Records
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartDepositWithdrawal">
            <summary>
            
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositWithdrawal.WithdrawId">
            <summary>
            Withdraw id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositWithdrawal.DepositId">
            <summary>
            Deposit id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositWithdrawal.OperationType">
            <summary>
            Operation type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositWithdrawal.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositWithdrawal.ApplyTime">
            <summary>
            Apply time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositWithdrawal.ArrivalQuantity">
            <summary>
            Arrival quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositWithdrawal.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositWithdrawal.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositWithdrawal.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositWithdrawal.AddressMemo">
            <summary>
            Address memo
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartDepositWithdrawal.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFeeRate">
            <summary>
            User fee rate
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFeeRate.FeeRateType">
            <summary>
            User fee rate type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFeeRate.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFeeRate.TakerFeeRateA">
            <summary>
            Taker fee rate for Class-A pairs
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFeeRate.MakerFeeRateA">
            <summary>
            Maker fee rate for Class-A pairs
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFeeRate.TakerFeeRateB">
            <summary>
            Taker fee rate for Class-B pairs
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFeeRate.MakerFeeRateB">
            <summary>
            Maker fee rate for Class-B pairs
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFeeRate.TakerFeeRateC">
            <summary>
            Taker fee rate for Class-C pairs
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFeeRate.MakerFeeRateC">
            <summary>
            Maker fee rate for Class-C pairs
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFeeRate.TakerFeeRateD">
            <summary>
            Taker fee rate for Class-D pairs
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFeeRate.MakerFeeRateD">
            <summary>
            Maker fee rate for Class-D pairs
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFundingRate">
            <summary>
            Funding rate info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRate.PreviousFundingRate">
            <summary>
            Funding rate of previous period
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRate.ExpectedFundingRate">
            <summary>
            Expected funding rate of next period
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRate.NextFundingTime">
            <summary>
            Next funding settlement time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRate.FundingUpperLimit">
            <summary>
            Upper limit of funding rate for this symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRate.FundingLowerLimit">
            <summary>
            Lower limit of funding rate for this symbol
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFundingRateHistory">
            <summary>
            Funding rate history
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRateHistory.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRateHistory.FundingRate">
            <summary>
            Funding rate
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRateHistory.FundingTime">
            <summary>
            Funding time
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFundingRateUpdate">
            <summary>
            Funding rate info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRateUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRateUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRateUpdate.FundingRate">
            <summary>
            Current funding rate
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRateUpdate.ExpectedFundingRate">
            <summary>
            Expected funding rate of next period
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRateUpdate.FundingTime">
            <summary>
            Timestamp of funding rate calculation
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRateUpdate.NextFundingTime">
            <summary>
            Forecasted funding time for the next period
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRateUpdate.FundingUpperLimit">
            <summary>
            Upper limit of funding rate for this symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFundingRateUpdate.FundingLowerLimit">
            <summary>
            Lower limit of funding rate for this symbol
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesBalance">
            <summary>
            Futures account balance
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesBalance.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesBalance.PositionMargin">
            <summary>
            Position margin
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesBalance.FrozenBalance">
            <summary>
            Frozen balance
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesBalance.AvailableBalance">
            <summary>
            Available balance
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesBalance.Equity">
            <summary>
            Equity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesBalance.UnrealizedPnl">
            <summary>
            Unrealized profit and loss
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesBalanceUpdate">
            <summary>
            Blanace update
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesBalanceUpdate.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesBalanceUpdate.Available">
            <summary>
            Available balance
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesBalanceUpdate.Frozen">
            <summary>
            Frozen balance
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesBalanceUpdate.PositionMargin">
            <summary>
            Position Margin
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesFeeRate">
            <summary>
            Fee rate
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesFeeRate.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesFeeRate.TakerFeeRateA">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesFeeRate.MakerFeeRateA">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate.Type">
            <summary>
            Update type, only applicable to incremental updates
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate.Version">
            <summary>
            Version, only applicable to incremental updates
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate.Asks">
            <summary>
            Asks
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesFullOrderBookUpdate.Bids">
            <summary>
            Bids
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesKline">
            <summary>
            Kline data
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKline.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKline.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKline.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKline.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKline.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKline.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesKlineUpdate">
            <summary>
            Kline data
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKlineUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKlineUpdate.Klines">
            <summary>
            Kline items
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesKlineItem">
            <summary>
            Kline data
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKlineItem.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKlineItem.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKlineItem.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKlineItem.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKlineItem.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesKlineItem.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.MarginType">
            <summary>
            Open type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.AveragePrice">
            <summary>
            Average price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.QuantityFilled">
            <summary>
            Quantity filled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.TriggerPrice">
            <summary>
            Trailing order trigger price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.CallbackRate">
            <summary>
            Trailing order callback rate
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.TriggerPriceType">
            <summary>
            Trailing order trigger price type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.PresetTakeProfitPriceType">
            <summary>
            Pre-set TakeProfit trigger price type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.PresetStopLossPriceType">
            <summary>
            Pre-set StopLoss trigger price type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.PresetTakeProfitPrice">
            <summary>
            Pre-set TakeProfit price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.PresetStopLossPrice">
            <summary>
            Pre-set StopLoss price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrder.TriggerOrderId">
            <summary>
            Order id of the executed trigger order
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesOrderBookUpdate">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderBookUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderBookUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderBookUpdate.Side">
            <summary>
            Side of the book
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderBookUpdate.Depths">
            <summary>
            Depths, can either be bids or asks, check Side to see which
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesOrderBookEntry">
            <summary>
            Order book entry
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderBookEntry.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderBookEntry.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesOrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderId.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesOrderResponse">
            <summary>
            Futures order response
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderResponse.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderResponse.Price">
            <summary>
            Price. Note that this is a string because when executing a market trade the server will return `market price` as string value.
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdateEvent">
            <summary>
            Order update event
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdateEvent.Event">
            <summary>
            Update trigger
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdateEvent.Order">
            <summary>
            Order info
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate">
            <summary>
            Order update
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.MarginType">
            <summary>
            Open type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.AveragePrice">
            <summary>
            Average price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.QuantityFilled">
            <summary>
            Quantity filled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.TriggerOrderId">
            <summary>
            Order id of the executed trigger order
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderUpdate.LastTrade">
            <summary>
            Last trade info
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesOrderTrade">
            <summary>
            Order trade info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderTrade.TradeId">
            <summary>
            Id of the last trade
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderTrade.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderTrade.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderTrade.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesOrderTrade.FeeAsset">
            <summary>
            Fee asset
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate">
            <summary>
            Ticker update
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate.Volume24h">
            <summary>
            Volume in past 24 hours
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate.FairPrice">
            <summary>
            Fair price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate.LastPrice">
            <summary>
            Last trade price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate.PriceRange">
            <summary>
            Price range
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTickerUpdate.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesTradeUpdate">
            <summary>
            Trade update
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTradeUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTradeUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTradeUpdate.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTradeUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTradeUpdate.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTradeUpdate.BuyerIsMaker">
            <summary>
            Whether the buyer was the maker
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesTransaction">
            <summary>
            Transaction info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTransaction.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTransaction.Type">
            <summary>
            Flow type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTransaction.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTransaction.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTransaction.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTransaction.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTransferWrapper.Records">
            <summary>
            Records
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesTransfer">
            <summary>
            Futures transfer record
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTransfer.TransferId">
            <summary>
            Transfer id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTransfer.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTransfer.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTransfer.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTransfer.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesTransfer.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartFuturesUserTrade">
            <summary>
            User trade info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesUserTrade.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesUserTrade.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesUserTrade.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesUserTrade.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesUserTrade.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesUserTrade.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesUserTrade.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesUserTrade.Profit">
            <summary>
            Profit
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesUserTrade.RealisedPnl">
            <summary>
            Realised profit and loss
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesUserTrade.Fee">
            <summary>
            Fee paid
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartFuturesUserTrade.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccountWrapper.Symbols">
            <summary>
            Symbols
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccount">
            <summary>
            Account info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccount.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccount.RiskRate">
            <summary>
            Risk rate
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccount.RiskLevel">
            <summary>
            Risk level
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccount.BuyEnabled">
            <summary>
            Buy enabled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccount.SellEnabled">
            <summary>
            Sell enabled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccount.LiquidatePrice">
            <summary>
            Liquidate price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccount.LiquidateRate">
            <summary>
            Liquidate rate
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccount.Base">
            <summary>
            Base
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccount.Quote">
            <summary>
            Quote
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccountAsset">
            <summary>
            Account asset info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccountAsset.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccountAsset.BorrowEnabled">
            <summary>
            Borrow enabled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccountAsset.Borrowed">
            <summary>
            Borrowed
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccountAsset.BorrowUnpaid">
            <summary>
            Borrow unpaid
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccountAsset.InterestUnpaid">
            <summary>
            Interest unpaid
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccountAsset.Available">
            <summary>
            Available
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccountAsset.Frozen">
            <summary>
            Frozen
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccountAsset.NetAsset">
            <summary>
            Net asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccountAsset.NetAssetBTC">
            <summary>
            Net asset BTC
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartIsolatedMarginAccountAsset.TotalAsset">
            <summary>
            Total asset
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartKline">
            <summary>
            
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartKline.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartKline.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartKline.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartKline.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartKline.ClosePrice">
            <summary>
            close price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartKline.Volume">
            <summary>
            Volume in base asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartKline.QuoteVolume">
            <summary>
            Volume in quote asset
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartKlineUpdate">
            <summary>
            Kline update
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartKlineUpdate.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartKlineUpdate.Kline">
            <summary>
            Kline/candle data
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartLeverage">
            <summary>
            Leverage info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartLeverage.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartLeverage.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartLeverage.MarginType">
            <summary>
            Open type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartLeverage.MaxValue">
            <summary>
            Max value
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartOpenInterest">
            <summary>
            Open interest
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOpenInterest.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOpenInterest.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOpenInterest.OpenInterest">
            <summary>
            Open interest
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOpenInterest.OpenInterestValue">
            <summary>
            Open interest value
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.SpotMode">
            <summary>
            Spot order mode
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.PriceAverage">
            <summary>
            Price average
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.QuantityFilled">
            <summary>
            Quantity filled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.QuoteQuantity">
            <summary>
            Quote quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.QuoteQuantityFilled">
            <summary>
            Quote quantity filled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrder.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartOrderBook">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderBook.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderBook.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderBook.Asks">
            <summary>
            Asks
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderBook.Bids">
            <summary>
            Bids
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartOrderBookEntry">
            <summary>
            Order book entry
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderBookEntry.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderBookEntry.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartOrderBookUpdate">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderBookUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderBookUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderBookUpdate.Asks">
            <summary>
            Asks
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderBookUpdate.Bids">
            <summary>
            Bids
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartOrderBookIncrementalUpdate">
            <summary>
            Incremental order book update
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderBookIncrementalUpdate.Type">
            <summary>
            Update type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderBookIncrementalUpdate.Version">
            <summary>
            Data version
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartOrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderId.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderId.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartOrderIds">
            <summary>
            Order ids
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderIds.OrderIds">
            <summary>
            Order ids of the placed orders
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartOrderRequest">
            <summary>
            Order request
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderRequest.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderRequest.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderRequest.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderRequest.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderRequest.Price">
            <summary>
            Limit price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderRequest.QuoteQuantity">
            <summary>
            Quote quantity for market order
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartOrderUpdate">
            <summary>
            Order update
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.SpotMode">
            <summary>
            Spot order mode
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.QuantityFilled">
            <summary>
            Quantity filled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.QuoteQuantity">
            <summary>
            Quote quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.QuoteQuantityFilled">
            <summary>
            Quote quantity filled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.EntrustType">
            <summary>
            Entrust type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.LastTradePrice">
            <summary>
            Price of the last trade
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.LastTradeQuantity">
            <summary>
            Quantity of the last trade
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.LastTradeTime">
            <summary>
            Timestamp of the last trade
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.LastTradeRole">
            <summary>
            Role of the last trade
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartOrderUpdate.LastTradeId">
            <summary>
            Id of the last trade
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartPosition">
            <summary>
            Position info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.CurrentFee">
            <summary>
            Current fee
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.CurrentValue">
            <summary>
            Current value
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.PositionValue">
            <summary>
            Position value
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.PositionCross">
            <summary>
            Position cross
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.MaintenanceMargin">
            <summary>
            Maintenance margin
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.CloseVolume">
            <summary>
            Close volume
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.CloseAveragePrice">
            <summary>
            Close average price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.OpenAveragePrice">
            <summary>
            Open average price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.EntryPrice">
            <summary>
            Entry price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.CurrentQuantity">
            <summary>
            Current quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.UnrealizedPnl">
            <summary>
            Unrealized profit and loss
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.RealizedPnl">
            <summary>
            Realized profit and loss
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPosition.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartPositionRisk">
            <summary>
            Position risk
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionRisk.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionRisk.PositionQuantity">
            <summary>
            Position quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionRisk.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionRisk.UnrealizedPnl">
            <summary>
            Unrealized profit and loss
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionRisk.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionRisk.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionRisk.MaxNotionalValue">
            <summary>
            Max notional value
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionRisk.MarginType">
            <summary>
            Margin type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionRisk.IsolatedMargin">
            <summary>
            Margin for isolated position
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionRisk.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionRisk.Notional">
            <summary>
            Notional
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionRisk.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartPositionUpdate">
            <summary>
            Position update
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionUpdate.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionUpdate.PositionSize">
            <summary>
            Position size
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionUpdate.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionUpdate.MarginType">
            <summary>
            Margin type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionUpdate.QuantityFrozen">
            <summary>
            Quantity frozen
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionUpdate.QuantityClose">
            <summary>
            Quantity close
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionUpdate.AverageHoldPrice">
            <summary>
            Average position price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionUpdate.AverageClosePrice">
            <summary>
            Average close price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionUpdate.AverageOpenPrice">
            <summary>
            Average open price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionUpdate.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionUpdate.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartPositionUpdate.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartRepayId">
            <summary>
            Repayment id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartRepayId.RepayId">
            <summary>
            Repay id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSpotBalanceWrapper.Wallet">
            <summary>
            Wallet
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartSpotBalance">
            <summary>
            
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSpotBalance.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSpotBalance.Available">
            <summary>
            Available
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSpotBalance.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSpotBalance.Frozen">
            <summary>
            Frozen
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartStatusWrapper.Service">
            <summary>
            Service
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartStatus">
            <summary>
            Server status info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartStatus.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartStatus.ServiceType">
            <summary>
            Service type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartStatus.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartStatus.StartTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartStatus.EndTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSubAccountWrapper.SubAccountList">
            <summary>
            Sub account list
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartSubAccount">
            <summary>
            Sub account info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSubAccount.AccountName">
            <summary>
            Account name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSubAccount.Status">
            <summary>
            Account status
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSubAccountBalanceWrapper.Wallet">
            <summary>
            Wallet
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartSubAccountBalance">
            <summary>
            Sub account balance
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSubAccountBalance.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSubAccountBalance.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSubAccountBalance.Available">
            <summary>
            Available
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSubAccountBalance.Frozen">
            <summary>
            Frozen
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbolWrapper.Symbols">
            <summary>
            Symbols
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartSymbol">
            <summary>
            Symbol info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbol.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbol.SymbolId">
            <summary>
            Symbol id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbol.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbol.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbol.QuoteIncrement">
            <summary>
            Quote increment
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbol.BaseMinQuantity">
            <summary>
            Base min quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbol.PriceMinPrecision">
            <summary>
            Price min precision
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbol.PriceMaxPrecision">
            <summary>
            Price max precision
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbol.Expiration">
            <summary>
            Expiration
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbol.MinBuyQuantity">
            <summary>
            Min buy quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbol.MinSellQuantity">
            <summary>
            Min sell quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbol.TradeStatus">
            <summary>
            Trade status
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartSymbolTradeFee">
            <summary>
            Symbol trading fee
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbolTradeFee.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbolTradeFee.BuyTakerFeeRate">
            <summary>
            Buy taker fee rate
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbolTradeFee.SellTakerFeeRate">
            <summary>
            Sell taker fee rate
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbolTradeFee.BuyMakerFeeRate">
            <summary>
            Buy maker fee rate
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartSymbolTradeFee.SellMakerFeeRate">
            <summary>
            Sell maker fee rate
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartTicker">
            <summary>
            Ticker/price statistics
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTicker.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTicker.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTicker.Volume24h">
            <summary>
            Volume over last 24h in base asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTicker.QuoteVolume24h">
            <summary>
            Volume over last 24h in quote asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTicker.OpenPrice">
            <summary>
            Open price 24h ago
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTicker.HighPrice">
            <summary>
            High price in last 24h
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTicker.LowPrice">
            <summary>
            Low price in last 24h
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTicker.Change">
            <summary>
            Price change factor
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTicker.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTicker.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTicker.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTicker.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTicker.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartTickerUpdate">
            <summary>
            Ticker update
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTickerUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTickerUpdate.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTickerUpdate.Volume24h">
            <summary>
            Volume over last 24h in base asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTickerUpdate.QuoteVolume24h">
            <summary>
            Volume over last 24h in quote asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTickerUpdate.OpenPrice">
            <summary>
            Open price 24h ago
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTickerUpdate.HighPrice">
            <summary>
            High price in last 24h
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTickerUpdate.LowPrice">
            <summary>
            Low price in last 24h
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTickerUpdate.Change">
            <summary>
            Price change factor
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTickerUpdate.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTickerUpdate.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTickerUpdate.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTickerUpdate.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTickerUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartTrade">
            <summary>
            Trade info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTrade.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTrade.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTrade.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTrade.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTrade.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartTradeUpdate">
            <summary>
            Trade update
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTradeUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTradeUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTradeUpdate.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTradeUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTradeUpdate.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartTransferId">
            <summary>
            Transfer id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTransferId.TransferId">
            <summary>
            Transfer id
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartTransferResult">
            <summary>
            Transfer result
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTransferResult.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTransferResult.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartTriggerOrder">
            <summary>
            Trigger order info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.OrderPrice">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.TriggerPrice">
            <summary>
            Trigger price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.Mode">
            <summary>
            Mode
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.PriceWay">
            <summary>
            Price way
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.PriceType">
            <summary>
            Price type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.PlanCategory">
            <summary>
            Plan category
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.Type">
            <summary>
            Trigger order type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.MarginType">
            <summary>
            Open type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.PresetTakeProfitPriceType">
            <summary>
            Pre-set TakeProfit trigger price type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.PresetStopLossPriceType">
            <summary>
            Pre-set StopLoss trigger price type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.PresetTakeProfitPrice">
            <summary>
            Pre-set TakeProfit price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartTriggerOrder.PresetStopLossPrice">
            <summary>
            Pre-set StopLoss price
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartUserTrade">
            <summary>
            
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.OrderMode">
            <summary>
            Order mode
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.FeeAsset">
            <summary>
            Fee asset name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.TradeRole">
            <summary>
            Trade role
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartUserTrade.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartWithdrawalAddress">
            <summary>
            Withdrawal address
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartWithdrawalAddress.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartWithdrawalAddress.Network">
            <summary>
            Network name
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartWithdrawalAddress.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartWithdrawalAddress.Memo">
            <summary>
            Memo
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartWithdrawalAddress.Remark">
            <summary>
            Remark
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartWithdrawalAddress.Type">
            <summary>
            Address type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartWithdrawalAddress.Verified">
            <summary>
            Is verified
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartWithdrawalQuota">
            <summary>
            Withdrawal quota
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartWithdrawalQuota.AvailableWithdrawBtc">
            <summary>
            Todays available withdraw of BTC
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartWithdrawalQuota.MinWithdraw">
            <summary>
            Min withdraw
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartWithdrawalQuota.WithdrawPrecision">
            <summary>
            Withdraw precision
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartWithdrawalQuota.WithdrawFee">
            <summary>
            Withdraw fee
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartWithdrawalQuota.WithdrawPrecisionStep">
            <summary>
            Withdraw precision step
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BitMartWithdrawId">
            <summary>
            Withdrawal id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BitMartWithdrawId.WithdrawId">
            <summary>
            Withdraw id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowInfoWrapper.Symbols">
            <summary>
            Symbols
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BorrowInfo">
            <summary>
            Borrow rate and quantity info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowInfo.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowInfo.MaxLeverage">
            <summary>
            Max leverage
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowInfo.SymbolEnabled">
            <summary>
            Symbol enabled
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowInfo.Base">
            <summary>
            Base
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowInfo.Quote">
            <summary>
            Quote
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BorrowInfoAsset">
            <summary>
            Asset info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowInfoAsset.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowInfoAsset.DailyInterest">
            <summary>
            Daily interest
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowInfoAsset.HourlyInterest">
            <summary>
            Hourly interest
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowInfoAsset.MaxBorrowQuantity">
            <summary>
            Max borrow quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowInfoAsset.MinBorrowQuantity">
            <summary>
            Min borrow quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowInfoAsset.BorrowableQuantity">
            <summary>
            Borrowable quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowRecordWrapper.Records">
            <summary>
            Records
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.BorrowRecord">
            <summary>
            Borrow details
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowRecord.BorrowId">
            <summary>
            Borrow id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowRecord.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowRecord.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowRecord.BorrowQuantity">
            <summary>
            Borrow quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowRecord.DailyInterest">
            <summary>
            Daily interest
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowRecord.HourlyInterest">
            <summary>
            Hourly interest
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowRecord.InterestQuantity">
            <summary>
            Interest quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.BorrowRecord.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.RepayRecordWrapper.Records">
            <summary>
            Records
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.RepayRecord">
            <summary>
            
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.RepayRecord.RepayId">
            <summary>
            Repay id
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.RepayRecord.RepayTime">
            <summary>
            Repay time
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.RepayRecord.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.RepayRecord.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.RepayRecord.RepaidQuantity">
            <summary>
            Repaid quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.RepayRecord.RepaidPrincipal">
            <summary>
            Repaid principal
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.RepayRecord.RepaidInterest">
            <summary>
            Repaid interest
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.SubAccountTransferHistory">
            <summary>
            Transfer history
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.SubAccountTransferHistory.Total">
            <summary>
            Total
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.SubAccountTransferHistory.HistoryList">
            <summary>
            History list
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Models.SubAccountTransfer">
            <summary>
            Transfer info
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.SubAccountTransfer.FromAccount">
            <summary>
            From account
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.SubAccountTransfer.FromWalletType">
            <summary>
            From wallet type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.SubAccountTransfer.ToAccount">
            <summary>
            To account
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.SubAccountTransfer.ToWalletType">
            <summary>
            To wallet type
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.SubAccountTransfer.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.SubAccountTransfer.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Models.SubAccountTransfer.Timestamp">
            <summary>
            Submission time
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Options.BitMartOptions">
            <summary>
            BitMart options
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Options.BitMartOrderBookOptions">
            <summary>
            Options for the BitMart SymbolOrderBook
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Options.BitMartOrderBookOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Options.BitMartOrderBookOptions.Limit">
            <summary>
            The top amount of results to keep in sync. If for example limit=10 is used, the order book will contain the 10 best bids and 10 best asks. Leaving this null will sync the full order book
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Options.BitMartOrderBookOptions.InitialDataTimeout">
            <summary>
            After how much time we should consider the connection dropped if no data is received for this time after the initial subscriptions
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Options.BitMartRestOptions">
            <summary>
            Options for the BitMartRestClient
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Options.BitMartRestOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="M:BitMart.Net.Objects.Options.BitMartRestOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Options.BitMartRestOptions.BrokerId">
            <summary>
            Set a broker id which will be send in the request headers
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Options.BitMartRestOptions.UsdFuturesOptions">
            <summary>
            UsdFutures API options
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Options.BitMartRestOptions.SpotOptions">
            <summary>
            Spot API options
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Options.BitMartSocketOptions">
            <summary>
            Options for the BitMartSocketClient
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Options.BitMartSocketOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="M:BitMart.Net.Objects.Options.BitMartSocketOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Options.BitMartSocketOptions.UsdFuturesOptions">
            <summary>
            UsdFutures API options
            </summary>
        </member>
        <member name="P:BitMart.Net.Objects.Options.BitMartSocketOptions.SpotOptions">
            <summary>
            Spot API options
            </summary>
        </member>
        <member name="T:BitMart.Net.Objects.Sockets.Subscriptions.BitMartFuturesSubscription`1">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Objects.Sockets.Subscriptions.BitMartFuturesSubscription`1.ListenerIdentifiers">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Objects.Sockets.Subscriptions.BitMartFuturesSubscription`1.GetMessageType(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Objects.Sockets.Subscriptions.BitMartFuturesSubscription`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.String[],System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{`0}},System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="logger"></param>
            <param name="topics"></param>
            <param name="handler"></param>
            <param name="auth"></param>
        </member>
        <member name="M:BitMart.Net.Objects.Sockets.Subscriptions.BitMartFuturesSubscription`1.GetSubQuery(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Objects.Sockets.Subscriptions.BitMartFuturesSubscription`1.GetUnsubQuery">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Objects.Sockets.Subscriptions.BitMartFuturesSubscription`1.DoHandleMessage(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Objects.Sockets.DataEvent{System.Object})">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.Objects.Sockets.Subscriptions.BitMartSubscription`1">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.Objects.Sockets.Subscriptions.BitMartSubscription`1.ListenerIdentifiers">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Objects.Sockets.Subscriptions.BitMartSubscription`1.GetMessageType(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Objects.Sockets.Subscriptions.BitMartSubscription`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.String[],System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{`0}},System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="logger"></param>
            <param name="topics"></param>
            <param name="handler"></param>
            <param name="auth"></param>
        </member>
        <member name="M:BitMart.Net.Objects.Sockets.Subscriptions.BitMartSubscription`1.GetSubQuery(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Objects.Sockets.Subscriptions.BitMartSubscription`1.GetUnsubQuery">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.Objects.Sockets.Subscriptions.BitMartSubscription`1.DoHandleMessage(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Objects.Sockets.DataEvent{System.Object})">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.SymbolOrderBooks.BitMartOrderBookFactory">
            <summary>
            BitMart order book factory
            </summary>
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartOrderBookFactory.#ctor(System.IServiceProvider)">
            <summary>
            ctor
            </summary>
            <param name="serviceProvider">Service provider for resolving logging and clients</param>
        </member>
        <member name="P:BitMart.Net.SymbolOrderBooks.BitMartOrderBookFactory.UsdFutures">
            <inheritdoc />
        </member>
        <member name="P:BitMart.Net.SymbolOrderBooks.BitMartOrderBookFactory.Spot">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartOrderBookFactory.Create(CryptoExchange.Net.SharedApis.SharedSymbol,System.Action{BitMart.Net.Objects.Options.BitMartOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartOrderBookFactory.CreateUsdFutures(System.String,System.Action{BitMart.Net.Objects.Options.BitMartOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartOrderBookFactory.CreateSpot(System.String,System.Action{BitMart.Net.Objects.Options.BitMartOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.SymbolOrderBooks.BitMartSpotSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartSpotSymbolOrderBook.#ctor(System.String,System.Action{BitMart.Net.Objects.Options.BitMartOrderBookOptions})">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartSpotSymbolOrderBook.#ctor(System.String,System.Action{BitMart.Net.Objects.Options.BitMartOrderBookOptions},Microsoft.Extensions.Logging.ILoggerFactory,BitMart.Net.Interfaces.Clients.IBitMartRestClient,BitMart.Net.Interfaces.Clients.IBitMartSocketClient)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="logger">Logger</param>
            <param name="restClient">Rest client instance</param>
            <param name="socketClient">Socket client instance</param>
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartSpotSymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartSpotSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartSpotSymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartSpotSymbolOrderBook.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:BitMart.Net.SymbolOrderBooks.BitMartUsdFuturesSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartUsdFuturesSymbolOrderBook.#ctor(System.String,System.Action{BitMart.Net.Objects.Options.BitMartOrderBookOptions})">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartUsdFuturesSymbolOrderBook.#ctor(System.String,System.Action{BitMart.Net.Objects.Options.BitMartOrderBookOptions},Microsoft.Extensions.Logging.ILoggerFactory,BitMart.Net.Interfaces.Clients.IBitMartRestClient,BitMart.Net.Interfaces.Clients.IBitMartSocketClient)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="logger">Logger</param>
            <param name="restClient">Rest client instance</param>
            <param name="socketClient">Socket client instance</param>
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartUsdFuturesSymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartUsdFuturesSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartUsdFuturesSymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BitMart.Net.SymbolOrderBooks.BitMartUsdFuturesSymbolOrderBook.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:CryptoExchange.Net.ExtensionMethods.CryptoClientExtensions">
            <summary>
            Extensions for the ICryptoRestClient and ICryptoSocketClient interfaces
            </summary>
        </member>
        <member name="M:CryptoExchange.Net.ExtensionMethods.CryptoClientExtensions.BitMart(CryptoExchange.Net.Interfaces.ICryptoRestClient)">
            <summary>
            Get the BitMart REST Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="M:CryptoExchange.Net.ExtensionMethods.CryptoClientExtensions.BitMart(CryptoExchange.Net.Interfaces.ICryptoSocketClient)">
            <summary>
            Get the BitMart Websocket Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Extensions for DI
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddBitMart(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add services such as the IBitMartRestClient and IBitMartSocketClient. Configures the services based on the provided configuration.
            </summary>
            <param name="services">The service collection</param>
            <param name="configuration">The configuration(section) containing the options</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddBitMart(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BitMart.Net.Objects.Options.BitMartOptions})">
            <summary>
            Add services such as the IBitMartRestClient and IBitMartSocketClient. Services will be configured based on the provided options.
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsDelegate">Set options for the BitMart services</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddBitMart(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BitMart.Net.Objects.Options.BitMartRestOptions},System.Action{BitMart.Net.Objects.Options.BitMartSocketOptions},System.Nullable{Microsoft.Extensions.DependencyInjection.ServiceLifetime})">
            <summary>
            DEPRECATED; use <see cref="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddBitMart(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BitMart.Net.Objects.Options.BitMartOptions})" /> instead
            </summary>
        </member>
    </members>
</doc>
